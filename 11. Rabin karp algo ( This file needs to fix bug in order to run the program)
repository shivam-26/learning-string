//C++ program for rabin karp algorithm.
#include <bits/stdc++.h>
using namespace std;
//This algorithm is also O(nm) worst case T.C. but for best and average case T.C. is O(n+m).
//This is less used algorithm.
#define d 256
void RKSearch(string pat, string txt,int q)
{
    int n=txt.length();int m = pat.length();
    int i,j;
    int t=0,p=0,h=1;
    for(i=0;i<=m-1;i++)
      h=(h*d)%q;
    for(i=0;i<m;i++)
    {
        p = (d*p + pat[i])%q;
        t = (d*t + txt[i])%q;
    }
    for(i=0;i<n-m;i++)
    {
        if(p==t)
        {
            bool flag = true;
            for(j=0;j<m;j++)
            {
                if(txt[i+j] != pat[j])
                { flag=false;
                  break;}
            }
            if (flag == true)  
                cout<<"Pattern found at index "<< i<<endl; 
        }
        if( i < n-m )
        {
            t = (d*(t - txt[i]*h) + txt[i+m])%q;
            if(t<0)
             t = (t + q);
        }
        
        
    }
    
}
int main()  
{  
    char txt[] = "GEEKS FOR GEEKS";  
    char pat[] = "GEEK"; 
        
      // A prime number  
    int q = 103;  
      
      // Function Call 
      RKSearch(pat, txt, q);  
    return 0;  
}  
